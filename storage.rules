rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidImageType() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isValidImageSize() {
      // Max 10MB per image
      return request.resource.size < 10 * 1024 * 1024;
    }
    
    // Issue photos
    match /issues/{issueId}/{fileName} {
      // Anyone authenticated can read issue photos
      allow read: if isAuthenticated();
      
      // Only authenticated users can upload issue photos
      // Must be an image and under 10MB
      allow create: if isAuthenticated() && 
                      isValidImageType() && 
                      isValidImageSize();
      
      // No updates allowed (delete and re-upload instead)
      allow update: if false;
      
      // Only the uploader can delete (stored in metadata)
      allow delete: if isAuthenticated() && 
                      resource.metadata.uploadedBy == request.auth.uid;
    }
    
    // Idea photos
    match /ideas/{ideaId}/{fileName} {
      // Anyone authenticated can read idea photos
      allow read: if isAuthenticated();
      
      // Only authenticated users can upload idea photos
      allow create: if isAuthenticated() && 
                      isValidImageType() && 
                      isValidImageSize();
      
      // No updates allowed
      allow update: if false;
      
      // Only the uploader can delete
      allow delete: if isAuthenticated() && 
                      resource.metadata.uploadedBy == request.auth.uid;
    }
    
    // User profile photos
    match /users/{userId}/profile/{fileName} {
      // Anyone authenticated can read profile photos
      allow read: if isAuthenticated();
      
      // Users can only upload their own profile photo
      allow create: if isOwner(userId) && 
                      isValidImageType() && 
                      isValidImageSize();
      
      // Users can update their own profile photo
      allow update: if isOwner(userId) && 
                      isValidImageType() && 
                      isValidImageSize();
      
      // Users can delete their own profile photo
      allow delete: if isOwner(userId);
    }
    
    // Announcement photos (officials only)
    match /announcements/{announcementId}/{fileName} {
      // Anyone authenticated can read announcement photos
      allow read: if isAuthenticated();
      
      // Only authenticated users can upload (will be verified by Firestore rules)
      allow create: if isAuthenticated() && 
                      isValidImageType() && 
                      isValidImageSize();
      
      // No updates allowed
      allow update: if false;
      
      // Only the uploader can delete
      allow delete: if isAuthenticated() && 
                      resource.metadata.uploadedBy == request.auth.uid;
    }
    
    // Verification photos (for issue verification)
    match /verifications/{issueId}/{fileName} {
      // Anyone authenticated can read verification photos
      allow read: if isAuthenticated();
      
      // Only authenticated users can upload verification photos
      allow create: if isAuthenticated() && 
                      isValidImageType() && 
                      isValidImageSize();
      
      // No updates allowed
      allow update: if false;
      
      // Only the uploader can delete
      allow delete: if isAuthenticated() && 
                      resource.metadata.uploadedBy == request.auth.uid;
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
